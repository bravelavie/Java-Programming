import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * This program will generate an index page from an input text file and list
 * them in alphabetical order.
 *
 * @author Kun Liu
 *
 */
public final class Glossary {

    /**
     * Compare {@code String}s in lexicographic order.
     */
    private static class StringLT implements Comparator<String> {
        @Override
        public int compare(String o1, String o2) {
            return o1.compareTo(o2);
        }
    }

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private Glossary() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file.
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */

    private static void outputHeader(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>Glossary</title>");
        out.println("</head>");

        out.println("<body>");
        out.println("<h2>Glossary</h2>");
        out.println("<hr>");
        out.println("<h3>Index</h3>");
        out.println("<ul>");
    }

    /**
     * Processes one index item and outputs one list row.
     *
     * @param word
     *            the term in the glossary
     * @param out
     *            the output stream
     * @updates out.content
     * @requires <pre>
     * [the term is a single "word"] and out.is_open
     * </pre>
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML list row with the term and the link to definition of the term]
     * </pre>
     */
    private static void processIndexItem(String word, SimpleWriter out) {
        out.println("<li>");
        out.println("<a href=\"" + word + ".html\">" + word + "</a>");
        out.println("</li>");
    }

    /**
     * Outputs the "closing" tags in the HTML file. These are the expected
     * elements generated by this method:
     *
     * </ul> </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Outputs the definition in the HTML file. Each file include a term, its
     * definition and link to return to index.html
     *
     * @param out
     *            the output stream
     * @param word
     *            the term of this definition file
     * @param glossary
     *            the glossary map with term and their definition
     * @param words
     *            the set for all terms
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = [an HTML file with term and its definition]
     */

    private static void writeDefinitionFile(String word, SimpleWriter out,
            Map<String, String> glossary, Set<String> words) {
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + word + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h2>");
        out.println("<b>");
        out.println("<i>");
        out.println("<font color=\"red\">" + word + "</font>");
        out.println("</i>");
        out.println("</b>");
        out.println("</h2>");
        out.println("<blockquote>");

        /*
         * write definition with possible link to other terms
         */
        String definition = glossary.value(word);
        out.println(outputDefinition(words, definition));

        out.println("</blockquote>");
        out.println("<hr>");
        out.println("<p>");
        out.println("Return to");
        out.println("<a href=\"index.html\">index</a>.");
        out.println("</p></body></html>");
    }

    /**
     * Outputs the definition sentence in the HTML file. If the sentence
     * contains another term, it will provide a link to the definition of that
     * term.
     *
     * @param definition
     *            the definition for current term extracted from glossary map
     * @param words
     *            the set for all terms
     * @return definition string with with links to other terms
     * @requires out.is_open
     * @ensures out.content = #out.content+[definition of term with links to
     *          other terms]
     */
    public static String outputDefinition(Set<String> words, String definition) {

        /*
         * Define separator characters for test
         */
        final String separatorStr = " \t, ";
        Set<Character> separatorSet = new Set1L<>();
        generateElements(separatorStr, separatorSet);

        String output = "";
        int position = 0;
        while (position < definition.length()) {
            String token = nextWordOrSeparator(definition, position,
                    separatorSet);
            if (words.contains(token)) {
                position += token.length();
                token = "<a href=\"" + token + ".html\">" + token + "</a>";
            } else {
                position += token.length();
            }
            output += token;
        }
        return output;
    }

    /**
     *
     * Read the input file and extract each term, put them into a queue and a
     * set, also extract each definition and build a map with each term.
     *
     * @param inputFile
     *            the input stream
     * @param index
     *            the unsorted queue for all terms
     * @param glossary
     *            the glossary map with term and their definition
     * @param words
     *            the set for all terms
     * @requires inputFile.is_open
     *
     * @updates index, words, glossary
     * @ensures index and words contain all terms, and glossary contain all
     *          pairs of terms and their definitions
     *
     */
    public static void indexAndGlossary(Queue<String> index, Set<String> words,
            Map<String, String> glossary, SimpleReader inputFile) {

        String nextLine, word;
        String definition = "";
        while (!inputFile.atEOS()) {
            word = inputFile.nextLine();
            index.enqueue(word);
            words.add(word);
            while (!inputFile.atEOS()
                    && !(nextLine = inputFile.nextLine()).isEmpty()) {
                definition += nextLine + " ";
            }
            glossary.add(word, definition);
            definition = "";
        }
    }

    /**
     * Generates the set of characters in the given {@code String} into the
     * given {@code Set}.
     *
     * @param str
     *            the given {@code String}
     * @param strSet
     *            the {@code Set} to be replaced
     * @replaces strSet
     * @ensures strSet = entries(str)
     */

    private static void generateElements(String str, Set<Character> strSet) {
        assert str != null : "Violation of: str is not null";
        assert strSet != null : "Violation of: strSet is not null";

        Set<Character> temp = strSet.newInstance();
        for (int i = 0; i < str.length(); i++) {
            char current = str.charAt(i);
            if (!temp.contains(current)) {
                temp.add(current);
            }
        }
        strSet.transferFrom(temp);
    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */
    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        String result = "";
        String sub = text.substring(position, text.length());
        if (separators.contains(sub.charAt(0))) {
            for (int j = 0; j < sub.length(); j++) {
                if (separators.contains(sub.charAt(j))) {
                    result += sub.charAt(j);
                } else {
                    break;
                }
            }
        } else {
            for (int i = 0; i < sub.length(); i++) {
                if (!separators.contains(sub.charAt(i))) {
                    result += sub.charAt(i);
                } else {
                    break;
                }
            }
        }
        return result;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */

    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Get input file name and open input stream
         */
        out.print("Enter an input file name: ");
        String fileName = in.nextLine();
        SimpleReader file = new SimpleReader1L(fileName);
        /*
         * Get output folder name and open input stream
         */
        out.print("Enter an output folder name: ");
        String folderName = in.nextLine();

        Set<String> words = new Set1L<>();
        Queue<String> index = new Queue1LSort1();
        Map<String, String> glossary = new Map1L<>();
        /*
         * Get queue, set and map for terms and definitions
         */
        indexAndGlossary(index, words, glossary, file);

        /*
         * Sort queue in alphabetical order
         */
        Comparator<String> cs = new StringLT();
        index.sort(cs);

        /*
         * create index.html to start output
         */
        SimpleWriter indexOut = new SimpleWriter1L(folderName + "/index.html");
        /*
         * print header to index.html
         */
        outputHeader(indexOut);

        /*
         * print list of terms to index.html and term.html
         */
        while (index.length() > 0) {
            String indexWord = index.dequeue();
            SimpleWriter definition = new SimpleWriter1L(folderName + "/"
                    + indexWord + ".html");
            processIndexItem(indexWord, indexOut);
            writeDefinitionFile(indexWord, definition, glossary, words);
        }

        /*
         * print footer to index.html
         */
        outputFooter(indexOut);

        /*
         * Close input and output streams
         */
        file.close();
        indexOut.close();
        in.close();
        out.close();
    }
}
